
---
interface Props {
	title: string;
	description: string;
}

const { title, description } = Astro.props;
---

<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/ryumi.ico" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=VT323&family=Roboto+Mono:wght@400;700&display=swap" rel="stylesheet">
	</head>
	<body>
    <canvas id="neural-network-canvas"></canvas>
		<slot />
    <script is:inline>
      const canvas = document.getElementById('neural-network-canvas');
      const ctx = canvas.getContext('2d');

      let width = canvas.width = window.innerWidth;
      let height = canvas.height = window.innerHeight;

      const particleColor = 'rgba(83, 252, 24, 1)';
      
      let particles = [];
      const particleCount = Math.floor((width * height) / 20000);
      const maxDistance = 150;

      const mouse = {
        x: null,
        y: null,
        radius: 150
      }

      window.addEventListener('mousemove', (event) => {
        mouse.x = event.x;
        mouse.y = event.y;
      });

      class Particle {
        constructor(x, y, dirX, dirY, size, color) {
          this.x = x;
          this.y = y;
          this.dirX = dirX;
          this.dirY = dirY;
          this.size = size;
          this.color = color;
        }

        draw() {
          ctx.beginPath();
          ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);
          ctx.fillStyle = this.color;
          ctx.fill();
        }

        update() {
          if (this.x > width || this.x < 0) {
            this.dirX = -this.dirX;
          }
          if (this.y > height || this.y < 0) {
            this.dirY = -this.dirY;
          }
          this.x += this.dirX;
          this.y += this.dirY;
          this.draw();
        }
      }

      function init() {
        particles = [];
        for (let i = 0; i < particleCount; i++) {
          let size = Math.random() * 2 + 1;
          let x = Math.random() * (width - size * 2) + size;
          let y = Math.random() * (height - size * 2) + size;
          let dirX = (Math.random() * 0.4) - 0.2;
          let dirY = (Math.random() * 0.4) - 0.2;
          particles.push(new Particle(x, y, dirX, dirY, size, particleColor));
        }
      }

      function connect() {
        let opacityValue = 1;
        for (let a = 0; a < particles.length; a++) {
          for (let b = a; b < particles.length; b++) {
            let distance = ((particles[a].x - particles[b].x) * (particles[a].x - particles[b].x)) 
                         + ((particles[a].y - particles[b].y) * (particles[a].y - particles[b].y));
            if (distance < (maxDistance * maxDistance)) {
              opacityValue = 1 - (distance / (maxDistance * maxDistance));
              ctx.strokeStyle = `rgba(83, 252, 24, ${opacityValue * 0.5})`;
              ctx.lineWidth = 1;
              ctx.beginPath();
              ctx.moveTo(particles[a].x, particles[a].y);
              ctx.lineTo(particles[b].x, particles[b].y);
              ctx.stroke();
            }
          }
        }
      }

      function animate() {
        requestAnimationFrame(animate);
        ctx.fillStyle = 'rgba(2, 4, 10, 0.25)';
        ctx.fillRect(0, 0, width, height);
        for (let i = 0; i < particles.length; i++) {
          particles[i].update();
        }
        connect();
      }

      window.addEventListener('resize', () => {
        width = canvas.width = window.innerWidth;
        height = canvas.height = window.innerHeight;
        mouse.radius = 150;
        init();
      });

      window.addEventListener('mouseout', () => {
          mouse.x = undefined;
          mouse.y = undefined;
      });

      init();
      animate();
    </script>
	</body>
</html>
<style is:global>
	:root {
		--background-color: #02040a;
	}
	html {
		font-family: system-ui, sans-serif;
		background: var(--background-color);
	}
  body {
    font-family: 'Roboto Mono', monospace;
    color: #f0f0f0;
    background-color: transparent;
    margin: 0;
    padding: 0;
    min-height: 100vh;
    display: flex; /* Restored */
    justify-content: center; /* Restored */
    align-items: center; /* Restored */
  }

  #neural-network-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
  }

  @media (max-width: 768px) {
    body {
        overflow-y: auto;
    }
  }

	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}
</style>